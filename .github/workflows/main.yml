# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
# demo trigger
env: 
  CI: false
  BUILDWEB: TRUE
  REACT_BUILD: 1.0
  
name: .NET_REACT

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }} 
      uses: actions/setup-node@v4
      if: ${{ env.BUILDWEB == 'TRUE' }}
      with:
        node-version: ${{ matrix.node-version }}
        cache-dependency-path: ./package-lock.json
        cache: 'npm'

    - name: Change Working Directory and Build
      if: ${{ env.BUILDWEB == 'TRUE' }} 
      working-directory: ./
      run: |
        ls -al
        npm install
        npm run build
        ls -al build
    
    - uses: actions/upload-artifact@main
      if: ${{ env.BUILDWEB == 'TRUE' }}
      with:
        name: builtWeb
        path: ./build

    - name: Set up Docker Buildx for Web
      uses: docker/setup-buildx-action@v3
      if: ${{ env.BUILDWEB == 'TRUE' }}
      with:
        driver: docker-container

    - name: Login to Docker Hub For Web
      uses: docker/login-action@v3
      if: ${{ env.BUILDWEB == 'TRUE' }}
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Copy files and build image for web
      if: ${{ env.BUILDWEB == 'TRUE' }}
      run: |
        touch Dockerfile
        sh -c 'cat << EOF >> Dockerfile
        FROM nginx:latest
        EXPOSE 80
        COPY ./default.conf /etc/nginx/conf.d/default.conf
        RUN chmod 644 /etc/nginx/conf.d/default.conf
        COPY ./build /usr/share/nginx/html
        COPY ./public/config.js /usr/share/nginx/html/config.js
        CMD ["nginx", "-g", "daemon off;"]
        EOF'
        docker buildx build \
          --platform linux/amd64,linux/arm64,linux/arm/v7 \
          -t modustech/modusgo:TaskTrackerApp-latest \
          --push \
          -f Dockerfile \
          .
